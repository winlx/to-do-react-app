{"version":3,"sources":["helpers/antForm/hasErrors.js","state/actionTypes.js","state/actions.js","components/AddingTast.jsx","components/ToDoList/components/Task.jsx","components/ToDoList/ToDoList.jsx","state/reducer.js","App.jsx","index.js"],"names":["hasErrors","fieldsError","Object","keys","some","field","ADD_TASK","EDIT_TASK","REMOVE_TASK","editTask","task","type","payload","Form","create","name","props","dispatch","_props$form","form","getFieldDecorator","getFieldsError","getFieldValue","validateFields","resetFields","submit","useCallback","taskVal","react_default","a","createElement","row_default","col_default","span","form_default","Item","rules","required","message","input_default","prefix","icon_default","placeholder","offset","button_default","shape","icon","onClick","disabled","_props$task","id","desc","isFinished","remove","changeStatus","val","_useState","useState","_useState2","slicedToArray","isEditing","setIsEditing","inputRef","useRef","switchEditMode","prevState","useEffect","current","focus","changeDesc","ev","relatedTarget","closest","currentTarget","className","initialValue","ref","onBlur","typography_default","Text","delete","switch_default","onChange","size","ToDoList","tasks","map","components_Task","key","reducer","state","action","arr","values","sort","b","sortOrder","length","taskId","nanoid","objectSpread","defineProperty","newState","Error","concat","initialState","App","_useReducer","useReducer","_useReducer2","sortedTasks","useMemo","card_default","divider_default","AddingTast","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.4d5c79eb.chunk.js","sourcesContent":["export default function hasErrors(fieldsError) {\r\n  return Object.keys(fieldsError).some(field => fieldsError[field]);\r\n}\r\n","export const ADD_TASK = 'ADD_TASK';\r\nexport const EDIT_TASK = 'EDIT_TASK';\r\nexport const REMOVE_TASK = 'REMOVE_TASK';\r\n","import {\r\n  ADD_TASK,\r\n  EDIT_TASK,\r\n  REMOVE_TASK,\r\n} from './actionTypes';\r\n\r\nexport function addTask(taskDesc) {\r\n  return {\r\n    type: ADD_TASK,\r\n    payload: taskDesc,\r\n  };\r\n}\r\n\r\nexport function editTask(task) {\r\n  return {\r\n    type: EDIT_TASK,\r\n    payload: task,\r\n  };\r\n}\r\n\r\nexport function removeTask(taskId) {\r\n  return {\r\n    type: REMOVE_TASK,\r\n    payload: taskId,\r\n  };\r\n}\r\n","import React, { useCallback } from 'react';\r\nimport Form from 'antd/lib/form';\r\nimport 'antd/lib/form/style/css';\r\nimport Input from 'antd/lib/input';\r\nimport 'antd/lib/input/style/css';\r\nimport Icon from 'antd/lib/icon';\r\nimport 'antd/lib/icon/style/css';\r\nimport Button from 'antd/lib/button';\r\nimport 'antd/lib/button/style/css';\r\nimport Row from 'antd/lib/row';\r\nimport 'antd/lib/row/style/css';\r\nimport Col from 'antd/lib/col';\r\nimport 'antd/lib/col/style/css';\r\nimport hasErrors from '../helpers/antForm/hasErrors';\r\nimport { addTask } from '../state/actions';\r\n\r\nfunction AddingTask(props) {\r\n  const {\r\n    dispatch,\r\n  } = props;\r\n\r\n  const {\r\n    getFieldDecorator,\r\n    getFieldsError,\r\n    getFieldValue,\r\n    validateFields,\r\n    resetFields,\r\n  } = props.form;\r\n\r\n  const submit = useCallback(\r\n    () => {\r\n      validateFields();\r\n\r\n      const taskVal = getFieldValue('task');\r\n\r\n      if (!taskVal) return;\r\n\r\n      dispatch(addTask(taskVal));\r\n      resetFields();\r\n    },\r\n    [\r\n      dispatch,\r\n      validateFields,\r\n      getFieldValue,\r\n      resetFields,\r\n    ],\r\n  );\r\n\r\n  return (\r\n    <Row>\r\n      <Col span={18}>\r\n        <Form.Item>\r\n          {getFieldDecorator(\r\n            'task',\r\n            {\r\n              rules: [{ required: true, message: 'Введите описание задачи!' }],\r\n            },\r\n          )(<Input\r\n            prefix={<Icon type=\"schedule\" />}\r\n            placeholder=\"Описание задачи\"\r\n          />)\r\n          }\r\n        </Form.Item>\r\n      </Col>\r\n      <Col offset={1} span={5}>\r\n        <Form.Item>\r\n          <Button\r\n            shape=\"circle\"\r\n            icon=\"plus\"\r\n            onClick={submit}\r\n            disabled={hasErrors(getFieldsError())}\r\n          />\r\n        </Form.Item>\r\n      </Col>\r\n    </Row>\r\n  );\r\n}\r\n\r\nexport default Form.create({ name: 'addingTask' })(AddingTask);\r\n","import React, {\r\n  useCallback,\r\n  useState,\r\n  useEffect,\r\n  useRef,\r\n} from 'react';\r\nimport Row from 'antd/lib/row';\r\nimport 'antd/lib/row/style/css';\r\nimport Col from 'antd/lib/col';\r\nimport 'antd/lib/col/style/css';\r\nimport Form from 'antd/lib/form';\r\nimport 'antd/lib/form/style/css';\r\nimport Button from 'antd/lib/button';\r\nimport 'antd/lib/button/style/css';\r\nimport Input from 'antd/lib/input';\r\nimport 'antd/lib/input/style/css';\r\nimport Typography from 'antd/lib/typography';\r\nimport 'antd/lib/typography/style/css';\r\nimport Switch from 'antd/lib/switch';\r\nimport 'antd/lib/switch/style/css';\r\nimport { editTask, removeTask } from '../../../state/actions';\r\nimport hasErrors from '../../../helpers/antForm/hasErrors';\r\n\r\nfunction Task(props) {\r\n  const { dispatch } = props;\r\n\r\n  const {\r\n    id,\r\n    desc,\r\n    isFinished,\r\n  } = props.task;\r\n\r\n  const {\r\n    getFieldDecorator,\r\n    getFieldsError,\r\n    getFieldValue,\r\n    validateFields,\r\n  } = props.form;\r\n\r\n  const remove = useCallback(\r\n    () => {\r\n      dispatch(removeTask(id));\r\n    },\r\n    [\r\n      dispatch,\r\n      id,\r\n    ],\r\n  );\r\n\r\n  const changeStatus = useCallback(\r\n    (val) => {\r\n      dispatch(editTask({ id, isFinished: val }));\r\n    },\r\n    [\r\n      dispatch,\r\n      id,\r\n    ],\r\n  );\r\n\r\n  const [isEditing, setIsEditing] = useState(false);\r\n  const inputRef = useRef();\r\n\r\n  const switchEditMode = useCallback(\r\n    () => setIsEditing(prevState => !prevState),\r\n    [setIsEditing],\r\n  );\r\n\r\n  useEffect(\r\n    () => {\r\n      if (isEditing && inputRef.current) inputRef.current.focus();\r\n    },\r\n    [isEditing, inputRef],\r\n  );\r\n\r\n  const changeDesc = useCallback(\r\n    (ev) => {\r\n      validateFields();\r\n\r\n      const taskVal = getFieldValue('task');\r\n\r\n      if (!taskVal) return;\r\n\r\n      dispatch(editTask({ id, desc: taskVal }));\r\n\r\n      const parentRowRelTarg = ev.relatedTarget && ev.relatedTarget.closest('.to-do-app__task-row');\r\n      const parentRowCurTarg = ev.currentTarget && ev.currentTarget.closest('.to-do-app__task-row');\r\n\r\n      if (parentRowRelTarg !== parentRowCurTarg) switchEditMode();\r\n    },\r\n    [\r\n      id,\r\n      dispatch,\r\n      validateFields,\r\n      getFieldValue,\r\n      switchEditMode,\r\n    ],\r\n  );\r\n\r\n  return (\r\n    <Row className=\"to-do-app__task-row\">\r\n      <Col span={18}>\r\n        <Form.Item>\r\n          {isEditing ?\r\n            getFieldDecorator(\r\n              'task',\r\n              {\r\n                initialValue: desc,\r\n                rules: [{ required: true, message: 'Введите описание задачи!' }],\r\n              },\r\n            )(<Input\r\n              ref={inputRef}\r\n              onBlur={changeDesc}\r\n              placeholder=\"Описание задачи\"\r\n            />)\r\n            :\r\n            <Typography.Text delete={isFinished}>{desc}</Typography.Text>\r\n          }\r\n        </Form.Item>\r\n      </Col>\r\n      <Col offset={1} span={1}>\r\n        <Form.Item>\r\n          {getFieldDecorator(\r\n            'isFinished',\r\n            {\r\n              initialValue: isFinished,\r\n            },\r\n          )(<Switch onChange={changeStatus} size=\"small\" />)\r\n          }\r\n        </Form.Item>\r\n      </Col>\r\n      <Col offset={1} span={1}>\r\n        <Form.Item>\r\n          <Button\r\n            shape=\"circle\"\r\n            icon=\"edit\"\r\n            onClick={switchEditMode}\r\n            disabled={hasErrors(getFieldsError())}\r\n          />\r\n        </Form.Item>\r\n      </Col>\r\n      <Col offset={1} span={1}>\r\n        <Form.Item>\r\n          <Button\r\n            shape=\"circle\"\r\n            icon=\"delete\"\r\n            onClick={remove}\r\n          />\r\n        </Form.Item>\r\n      </Col>\r\n    </Row>\r\n  );\r\n}\r\n\r\nexport default Form.create({ name: 'task' })(Task);\r\n","import React from 'react';\r\nimport Task from './components/Task';\r\n\r\nexport default function ToDoList(props) {\r\n  return props.tasks.map(task => (\r\n    <Task\r\n      key={task.id}\r\n      task={task}\r\n      dispatch={props.dispatch}\r\n    />\r\n  ));\r\n}\r\n","import nanoid from 'nanoid';\r\nimport {\r\n  ADD_TASK,\r\n  EDIT_TASK,\r\n  REMOVE_TASK,\r\n} from './actionTypes';\r\n\r\nexport default function reducer(state, action) {\r\n  switch (action.type) {\r\n    case ADD_TASK: {\r\n      const arr = Object.values(state);\r\n      arr.sort((a, b) => a.sortOrder - b.sortOrder);\r\n      const sortOrder = arr.length ? arr[arr.length - 1].sortOrder + 1 : 1;\r\n      const taskId = nanoid();\r\n\r\n      return {\r\n        ...state,\r\n        [taskId]: {\r\n          id: taskId,\r\n          desc: action.payload,\r\n          sortOrder,\r\n          isFinished: false,\r\n        },\r\n      };\r\n    }\r\n\r\n    case EDIT_TASK: {\r\n      const newState = { ...state };\r\n      newState[action.payload.id] = {\r\n        ...newState[action.payload.id],\r\n        ...action.payload,\r\n      };\r\n\r\n      return newState;\r\n    }\r\n\r\n    case REMOVE_TASK: {\r\n      const newState = { ...state };\r\n      delete newState[action.payload];\r\n\r\n      return newState;\r\n    }\r\n\r\n    default:\r\n      throw new Error(`Такого экшена \"${action.type}\" не существует.`);\r\n  }\r\n}\r\n","import React, { useReducer, useMemo } from 'react';\r\nimport Card from 'antd/lib/card';\r\nimport 'antd/lib/card/style/css';\r\nimport Divider from 'antd/lib/divider';\r\nimport 'antd/lib/divider/style/css';\r\nimport AddingTast from './components/AddingTast';\r\nimport ToDoList from './components/ToDoList/ToDoList';\r\nimport reducer from './state/reducer';\r\nimport './App.css';\r\n\r\nconst initialState = {};\r\n\r\nfunction App() {\r\n  const [tasks, dispatch] = useReducer(reducer, initialState);\r\n\r\n  const sortedTasks = useMemo(\r\n    () => {\r\n      const arr = Object.values(tasks);\r\n      return arr.sort((a, b) => a.sortOrder - b.sortOrder);\r\n    },\r\n    [tasks],\r\n  );\r\n\r\n  return (\r\n    <Card\r\n      // title=\"To-do app\"\r\n      className=\"to-do-app\"\r\n    >\r\n      <Divider>Добавление задачи</Divider>\r\n      <AddingTast\r\n        dispatch={dispatch}\r\n      />\r\n      <Divider>Список задач</Divider>\r\n      <ToDoList\r\n        tasks={sortedTasks}\r\n        dispatch={dispatch}\r\n      />\r\n    </Card>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","/* eslint-disable react/jsx-filename-extension */\r\n\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}